What is tuple?
.........................................................................
In Python programming, a tuple is similar to a list. The difference between the two is that we cannot change the elements of a tuple once it is assigned whereas in a list, elements can be changed.



Advantages of Tuple over List-
.........................................................................
Since, tuples are quite similiar to lists, both of them are used in similar situations as well.
However, there are certain advantages of implementing a tuple over a list. Below listed are some of the main advantages:

1. We generally use tuple for heterogeneous (different) datatypes and list for homogeneous (similar) datatypes.
Since,  tuple are immutable, iterating through tuple is faster than with list. So, there is a slight performance boost.

2. Tuples that contain immutable elements can be used as key for a dictionary. With list, this is not possible.

3. If you have data that doesn't change, implementing it as tuple will guarantee that it remains write-protected.



.................................................................................
Creating a Tuple-


A tuple is created by placing all the items (elements) inside a parentheses (), separated by comma. The parentheses are optional but is a good practice to write it.

A tuple can have any number of items and they may be of different types (integer, float, list, string etc.).



my_tuple = ()

print(my_tuple)

my_tuple = (1, 2, 3)

print(my_tuple)



my_tuple = (1, "Hello", 3.4)

print(my_tuple)


.........................................................................

Accessing Elements in a Tuple::

There are various ways in which we can access the elements of a tuple.

1. Indexing
	We can use the index operator [] to access an item in a tuple where the index starts from 0.

So, a tuple having 6 elements will have index from 0 to 5. Trying to access an element other that (6, 7,...) will raise an IndexError.

The index must be an integer, so we cannot use float or other types. This will result into TypeError.

Likewise, nested tuple are accessed using nested indexing, as shown in the example below.




my_tuple = ('p','e','r','m','i','t')

# Output: 'p'
print(my_tuple[0])

# Output: 't'
print(my_tuple[5])

................................................................................

2. Negative Indexing
Python allows negative indexing for its sequences.

The index of -1 refers to the last item, -2 to the second last item and so on.

my_tuple = ('p','e','r','m','i','t')

# Output: 't'
print(my_tuple[-1])

# Output: 'p'
print(my_tuple[-6])


................................................................................
Changing a Tuple
Unlike lists, tuples are immutable.

This means that elements of a tuple cannot be changed once it has been assigned. But, if the element is itself a mutable datatype like list, its nested items can be changed.
We can also assign a tuple to different values (reassignment).

my_tuple = (4, 2, 3, [6, 5])
my_tuple[3][0] = 9

print(my_tuple)

...................................................................................

Deleting a Tuple
As discussed above, we cannot change the elements in a tuple. That also means we cannot delete or remove items from a tuple.

But deleting a tuple entirely is possible using the keyword del.

my_tuple = ('p','r','o','g','r','a','m','i','z')
del my_tuple
my_tuple




..............................................................................

Python Tuple Methods--
Methods that add items or remove items are not available with tuple. Only the following two methods are available.


ount(x)-	Return the number of items that is equal to x
index(x)-	Return index of first item that is equal to x

my_tuple = ('a','p','p','l','e',)



print(my_tuple.count('p'))



print(my_tuple.index('l'))




...............................................................................
other inbuilt function::

all()	Return True if all elements of the tuple are true (or if the tuple is empty).
any()	Return True if any element of the tuple is true. If the tuple is empty, return False.
enumerate()	Return an enumerate object. It contains the index and value of all the items of tuple as pairs.
len()	Return the length (the number of items) in the tuple.
max()	Return the largest item in the tuple.
min()	Return the smallest item in the tuple
sorted() Take elements in the tuple and return a new sorted list (does not sort the tuple itself).
sum()	Retrun the sum of all elements in the tuple.
tuple()	Convert an iterable (list, string, set, dictionary) to a tuple.

