
SET::
.........................................................................

1. A set is an unordered collection of items. 

2. Every element is unique (no duplicates) and must be immutable (which cannot be changed).
However, the set itself is mutable. We can add or remove items from it.

3. Sets can be used to perform mathematical set operations like union, intersection, symmetric difference etc.

_________________________________How to create a set?

1. A set is created by placing all the items (elements) inside curly braces {}, separated by comma or by using the built-in function set().

2. It can have any number of items and they may be of different types (integer, float, tuple, string etc.). But a set cannot have a mutable element, like list, set or dictionary, as its element.

		my_set = {1, 2, 3}
		
print(my_set)

		type(my_set)

_________________________________________________________________________
**Creating an empty set is a bit tricky.

Empty curly braces {} will make an empty dictionary in Python. 
To make a set without any elements we use the set() function without any argument.

		a = {}
		print(type(a))


		a=set()
		
print(type(a))


________________________________________________________________________
How to change a set in Python?

1. Sets are mutable. But since they are unordered, indexing have no meaning.
2. We cannot access or change an element of set using indexing or slicing. Set does not support it.

3. We can add single element using the add() method and multiple elements using the update() method. 

4. The update() method can take tuples, lists, strings or other sets as its argument. In all cases, duplicates are avoided.

		my_set = {1,3}

		print(my_set)
		
		my_set.add(2)

		print(my_set)
		
		my_set.update([2,3,4])

		print(my_set)


_________________________________________________________________________
How to remove elements from a set?

A particular item can be removed from set using methods, discard() and remove().
The only difference between the two is that, while using discard() if the item does not exist in the set, it remains unchanged. But remove() will raise an error in such condition.

		my_set = {1, 3, 4, 5, 6}
		
print(my_set)
		my_set.discard(4)
		
print(my_set)

..........................................

Sets can be used to carry out mathematical set operations like union, intersection, difference and symmetric difference. We can do this with operators or methods.

Let us consider the following two sets for the following operations.


	union-   |     # combining all records keeping unique 
	intersection- &     # fetch out only unique record
	diffrence -  	    # A-B ...it takes only A records
	symmetric diffrence - ^  # (A-B) U (B-A) 


A= {"Jay", "Idrish", "Archil"}
B = {"Karan", "Arjun"}
population = A.union(B)


_________________________________________________________________________

add()  	 Adds an element to the set

clear()	 Removes all elements from the set

copy()	 Returns a copy of the set


difference()	Returns the difference of two or more sets as a new set

difference_update()	Removes all elements of another set from this set

discard()	Removes an element from the set if it is a member. (Do nothing if the element is not in set)

intersection()	Returns the intersection of two sets as a new set

intersection_update()	Updates the set with the intersection of itself and another

isdisjoint()	Returns True if two sets have a null intersection

issubset()	Returns True if another set contains this set

issuperset()	Returns True if this set contains another set

pop()	Removes and returns an arbitary set element. Raise KeyError if the set is empty

remove()	Removes an element from the set. If the element is not a member, raise a KeyError

symmetric_difference()	Returns the symmetric difference of two sets as a new set

symmetric_difference_update()	Updates a set with the symmetric difference of itself and another

union()	        Returns the union of sets in a new set

update()	Updates the set with the union of itself and others



________________________________________________________________________

all()	Return True if all elements of the set are true (or if the set is empty).
any()	Return True if any element of the set is true. If the set is empty, return False.
enumerate()	Return an enumerate object. It contains the index and value of all the items of set as a pair.
len()	Return the length (the number of items) in the set.
max()	Return the largest item in the set.
min()	Return the smallest item in the set.
sorted()	Return a new sorted list from elements in the set(does not sort the set itself).
sum()	Retrun the sum of all elements in the set.



.........................................................................


list is showedas []
touple as ()
dictionary{}
set{}

_________________________________________________________________________

Frozen Sets Frozen sets are immutable objects that only support methods and operators that produce a result without a?ecting the frozen set or sets to which they are applied.

frozen_set = frozenset(["e", "f", "g"]) 
print(frozen_set) 
